#!/usr/bin/env python3
import re
import os
import subprocess


def check_commit_message(lines):
    errors = []
    filtered = (line.rstrip() for line in lines if not line.startswith("#"))
    for lineno, line in enumerate(filtered, start=1):
        if lineno == 1:
            errors += _check_subject(line)
        elif lineno == 2:
            errors += _check_separator(line)
        else:
            errors += _check_body(line)
    return set(errors)


def _check_subject(line):
    errors = []
    if len(line) > 50:
        errors.append("subject line is too long (limit is 50 chars)")
    if line and line[0].islower():
        errors.append("subject line is not capitalized")
    if line and line[-1] == ".":
        errors.append("subject line ends with a period")
    if re.match(r'^[a-z]+ed\b', line, re.IGNORECASE):
        errors.append("subject line uses past tense")
    return errors


def _check_separator(line):
    errors = []
    if line != "":
        errors.append("subject and body are not separated by a blank line")
    return errors


def _check_body(line):
    errors = []
    if len(line) > 72:
        errors.append("message body exceeds maximum width of 72 chars")
    return errors


def check_file(fname):
    with open(fname) as f:
        return check_commit_message(f)


def main(args):
    # git hooks get /dev/null as stdin, but we need a tty for input()
    sys.stdin = open("/dev/tty")
    editor = os.environ.get("EDITOR", "mvim -f")
    while True:
        errors = check_file(args[0])
        if not errors:
            break
        print("Your commit message is malformed:")
        for error in errors:
            print(" - %s" % error)
        # FIXME: add veto option
        answer = input("Edit again? [Y/n] ")
        if answer.strip().lower() not in ["n", "no"]:
            subprocess.call(editor.split() + args)
        else:
            sys.exit(len(errors))


if __name__ == "__main__":
    import sys
    main(sys.argv[1:])
