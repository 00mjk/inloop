This document lists some of the things that should be refactored. But it also should
serve as a "Lessons learned" and coding style guide for future development. Of course,
PEP8 applies for Python code, as always. The following notes apply to a higher level.

General
=======

 * G01: don't mix data and code
    - reason: separation makes code easier to read (e.g., templates)
    - candidates: almost all tests in task.tests

 * G02: naming
    - choose a name and stick to it, period.
    - candidates: exercise vs. task

 * G03: use management commands (aka use the framework wisely)
    - code smell: calling `django.setup()`

 * G03: sloppy reuse of thirdparty app (django.contrib.auth)
    - code smell: redefining the complete urlconf of django.contrib.auth instead
      of including it (!!!)
    - candidates: accounts.urls

 * G04: don't rely on default encoding in open() and related funcs
    - although we have been lucky until now, the old Praktomat crashed several times
      because the code assumed the default locale was set to UTF-8
    - solution: use `open(encoding='utf-8')`
    - see also: C04

 * G05: while we are at it, always use `open()` and related funcs (e.g., temporary files)
   as context manager to prevent resource leaks

Models
======

 * M01: some fields, e.g. `slug`, should be internal and only be initialized inside the
   model class itself, not in the calling code
    - reason: do it once, and do it well
    - candidates: tasks.models.Task

View code
=========

 * V01: redirect after a successful `POST` (aka "PRG") to prevent duplicate submits
   (see https://en.wikipedia.org/wiki/Post/Redirect/Get)

 * V02: reuse Django's generic class-based views, e.g. `DetailView` and `ListView`
    - generic views *do* support reference by `slug` and/or `pk`/`id` field
    - candidates: tasks.detail()
   (see https://docs.djangoproject.com/en/1.8/topics/class-based-views/generic-display/)

 * V03: use class-based views
    - code smell: repeated pattern `if request.method == 'POST': ... else: ...`
    - solution: override `View.get()` and `View.post()` instead
    - candidates: tasks.index()

Templates
=========

 * T01: alert boxes should be factored out into includes using `with`
   (see https://docs.djangoproject.com/en/1.8/ref/templates/builtins/#include)
    - reason: unnecessary boilerplate and duplicate code

 * T02: don't mix plain display and submit -- use a seperate view, and a separate template
    - candidates: tasks/tasks-detail.html
    - also see: V02, C02

CSS/HTML
========

 * C01: Bootstrap's `col-*` system is nice, but don't abuse it to center `<div>`s (!!!)
    - code smell: a `<div>` with classes `col-md-offset-X` and `col-md-X`, which
      actually shall be a centered `<div>`
    - intermediate solution: set `width`/`max-width` and use class `center-block`
    - refactored solution: introduce new CSS class, and apply intermediate solution
      (using LESS mixins)
    - candidates: nearly all of our HTML templates
   (see http://getbootstrap.com/css/#helper-classes-center)

 * C02: avoid excessive whitespace
    - reason: makes template code quite messy and unreadable and editing a pain
    - use 2 spaces for indentation -- if at all!
    - because Bootstrap requires many `<div>`s, HTML will be *extremely* nested even
      for simple layouts -- a good compromise is to use flat indentation for `<div>`s
      and append a comment to the closing tag, e.g. `<!--/.container-->`
    - Firefox and Chrome developer tools will view a nice representation anyway
    - also see: T02

 * C03: HTML5 is not XML, so there's no need for `/>` on single tags (e.g., `<input>`)

 * C04: specify encoding
    - at the document level: `<meta charset="utf-8">`
    - for forms: `<form accept-charset="utf-8">`
